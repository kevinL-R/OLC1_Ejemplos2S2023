/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,9],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,14],$V6=[1,15],$V7=[1,16],$V8=[5,12,13,20,39,40,41,42,43],$V9=[1,35],$Va=[1,29],$Vb=[1,43],$Vc=[1,44],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[1,27],$Vi=[1,28],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,33],$Vn=[1,34],$Vo=[1,36],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[8,15,22,54,55,56,57,58,59,60,61,62,63,64,65,66,68],$VE=[8,15,22,65,66],$VF=[15,22],$VG=[8,15,22,54,55,60,61,62,63,64,65,66,68],$VH=[8,15,22,54,55,56,57,59,60,61,62,63,64,65,66,68],$VI=[8,15,22,60,61,62,63,64,65,66,68],$VJ=[1,124],$VK=[1,125],$VL=[1,123],$VM=[13,18,39,40,41,42,43,48,52,53],$VN=[1,156],$VO=[13,18,39,40,41,42,43,48,49,52,53];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"OPCIONESCUERPO":4,"EOF":5,"CUERPO":6,"DEC_VAR":7,"ptcoma":8,"ASIG_VAR":9,"METODOS":10,"MAIN":11,"Rvoid":12,"identificador":13,"parA":14,"parC":15,"llaveA":16,"INSTRUCCIONES":17,"llaveC":18,"LIST_PARAMETROS":19,"Rmain":20,"PARAMETROS_LLAMADA":21,"coma":22,"PARAMETROS":23,"EXPRESION":24,"TIPO":25,"TOLOWER":26,"Rtolower":27,"LENGTH":28,"Rlength":29,"TOUPPER":30,"RtoUpper":31,"TRUNCATE":32,"Rtruncate":33,"ROUND":34,"Rround":35,"TYPEOF":36,"Rtypeof":37,"igual":38,"Rint":39,"Rdouble":40,"Rchar":41,"Rboolean":42,"Rstring":43,"INSTRUCCION":44,"PRINT":45,"IF":46,"WHILE":47,"Rif":48,"Relse":49,"ELSEIF":50,"CONEIF":51,"Rwhile":52,"Rprint":53,"suma":54,"menos":55,"multi":56,"div":57,"exponente":58,"modulo":59,"menor":60,"mayor":61,"menorIgual":62,"mayorIgual":63,"diferente":64,"and":65,"or":66,"not":67,"igualigual":68,"decimal":69,"entero":70,"Rtrue":71,"Rfalse":72,"string":73,"char":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"ptcoma",12:"Rvoid",13:"identificador",14:"parA",15:"parC",16:"llaveA",18:"llaveC",20:"Rmain",22:"coma",27:"Rtolower",29:"Rlength",31:"RtoUpper",33:"Rtruncate",35:"Rround",37:"Rtypeof",38:"igual",39:"Rint",40:"Rdouble",41:"Rchar",42:"Rboolean",43:"Rstring",48:"Rif",49:"Relse",52:"Rwhile",53:"Rprint",54:"suma",55:"menos",56:"multi",57:"div",58:"exponente",59:"modulo",60:"menor",61:"mayor",62:"menorIgual",63:"mayorIgual",64:"diferente",65:"and",66:"or",67:"not",68:"igualigual",69:"decimal",70:"entero",71:"Rtrue",72:"Rfalse",73:"string",74:"char"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[10,7],[10,8],[11,5],[11,6],[19,3],[19,1],[21,3],[21,1],[23,2],[26,4],[28,4],[30,4],[32,4],[34,4],[36,4],[7,2],[7,4],[9,3],[25,1],[25,1],[25,1],[25,1],[25,1],[17,2],[17,1],[44,2],[44,2],[44,1],[44,1],[44,1],[46,7],[46,11],[46,8],[46,12],[50,2],[50,1],[51,8],[47,7],[45,5],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,3],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 42:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 13: case 15: case 43:
this.$=[$$[$0]];
break;
case 4: case 5: case 33: case 34:
this.$=$$[$0-1];
break;
case 6: case 7: case 35: case 36: case 37: case 72:
this.$=$$[$0];
break;
case 8:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-5], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 9:
this.$ = INSTRUCCION.nuevoMetodo($$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 10:
this.$ = INSTRUCCION.nuevoMain($$[$0-3], null, this._$.first_line,this._$.first_column+1)
break;
case 11:
this.$ = INSTRUCCION.nuevoMain($$[$0-4], $$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 12: case 14:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 16:
this.$ = INSTRUCCION.nuevaDeclaracion($$[$0], null, $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 17:
this.$= INSTRUCCION.nuevoToLower($$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 18:
this.$= INSTRUCCION.nuevoLength($$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 19:
this.$= INSTRUCCION.nuevoToUpper($$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 20:
this.$= INSTRUCCION.nuevoTruncate($$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 21:
this.$= INSTRUCCION.nuevoRound($$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 22:
this.$= INSTRUCCION.nuevoTypeof($$[$0-1], this._$.first_line, this._$.first_column+1);
break;
case 23:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0],null, $$[$0-1],this._$.first_line, this._$.first_column+1)
break;
case 24:
this.$= INSTRUCCION.nuevaDeclaracion($$[$0-2], $$[$0], $$[$0-3],this._$.first_line, this._$.first_column+1);

        
break;
case 25:
this.$ = INSTRUCCION.nuevaAsignacion($$[$0-2], $$[$0],this._$.first_line, this._$.first_column+1)
break;
case 26:
this.$= TIPO_DATO.ENTERO
break;
case 27:
this.$= TIPO_DATO.DECIMAL
break;
case 28:
this.$= TIPO_DATO.CHAR
break;
case 29:
this.$= TIPO_DATO.BOOL
break;
case 30:
this.$= TIPO_DATO.CADENA
break;
case 31:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 32:
this.$ = [$$[$0]];
break;
case 38:
this.$ = new INSTRUCCION.nuevoIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 39:
this.$ = new INSTRUCCION.nuevoIfElse($$[$0-8], $$[$0-5], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 40:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-5], $$[$0-2], $$[$0], null, this._$.first_line,this._$.first_column+1)
break;
case 41:
this.$= new INSTRUCCION.nuevoIfConElseIf($$[$0-9], $$[$0-6], $$[$0-4], $$[$0-1], this._$.first_line,this._$.first_column+1)
break;
case 44:
this.$ = new INSTRUCCION.nuevoElseIf($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1) 
break;
case 45:
this.$ = new INSTRUCCION.nuevoWhile($$[$0-4], $$[$0-1] , this._$.first_line,this._$.first_column+1)
break;
case 46:
this.$ = INSTRUCCION.nuevoPrint($$[$0-2], this._$.first_line,this._$.first_column+1)
break;
case 47:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.SUMA,this._$.first_line, this._$.first_column+1);
break;
case 48:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.RESTA,this._$.first_line, this._$.first_column+1);
break;
case 49:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MULTIPLICACION,this._$.first_line, this._$.first_column+1);
break;
case 50:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIVISION,this._$.first_line, this._$.first_column+1);
break;
case 51:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.POTENCIA,this._$.first_line, this._$.first_column+1);
break;
case 52:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MODULO,this._$.first_line, this._$.first_column+1);
break;
case 53:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENOR,this._$.first_line, this._$.first_column+1);
break;
case 54:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYOR,this._$.first_line, this._$.first_column+1);
break;
case 55:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MENORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 56:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.MAYORIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 57:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.DIFERENTE,this._$.first_line, this._$.first_column+1);
break;
case 58:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.AND,this._$.first_line, this._$.first_column+1);
break;
case 59:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.OR,this._$.first_line, this._$.first_column+1);
break;
case 60:
this.$= INSTRUCCION.nuevaOperacionUnaria($$[$0], TIPO_OPERACION.UNARIA,this._$.first_line, this._$.first_column+1);
break;
case 61:
this.$= INSTRUCCION.nuevaOperacionBinaria(null,$$[$0], TIPO_OPERACION.NOT,this._$.first_line, this._$.first_column+1);
break;
case 62:
this.$=$$[$0-1]
break;
case 63:
this.$= INSTRUCCION.nuevaOperacionBinaria($$[$0-2],$$[$0], TIPO_OPERACION.IGUALIGUAL,this._$.first_line, this._$.first_column+1);
break;
case 64:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.DECIMAL,this._$.first_line, this._$.first_column+1);
break;
case 65:
this.$= INSTRUCCION.nuevoValor(Number($$[$0]),TIPO_VALOR.ENTERO,this._$.first_line, this._$.first_column+1);
break;
case 66: case 67:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.BOOL,this._$.first_line, this._$.first_column+1);
break;
case 68:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CADENA,this._$.first_line, this._$.first_column+1);
break;
case 69:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.IDENTIFICADOR,this._$.first_line, this._$.first_column+1);
break;
case 70:
this.$= INSTRUCCION.nuevoValor($$[$0],TIPO_VALOR.CHAR,this._$.first_line, this._$.first_column+1);
break;
case 71: case 73: case 74: case 75: case 76:
this.$=$$[$0]
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:$V0,13:$V1,20:$V2,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7},{1:[3]},{5:[1,17],6:18,7:4,9:5,10:6,11:7,12:$V0,13:$V1,20:$V2,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7},o($V8,[2,3]),{8:[1,19]},{8:[1,20]},o($V8,[2,6]),o($V8,[2,7]),{13:[1,21]},{38:[1,22]},{13:[1,23]},{13:[1,24]},{13:[2,26]},{13:[2,27]},{13:[2,28]},{13:[2,29]},{13:[2,30]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,4]),o($V8,[2,5]),{8:[2,23],38:[1,25]},{13:$V9,14:$Va,24:26,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{14:[1,49]},{14:[1,50]},{13:$V9,14:$Va,24:51,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{8:[2,25],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{13:$V9,14:$Va,24:66,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:67,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:68,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},o($VD,[2,64]),o($VD,[2,65]),o($VD,[2,66]),o($VD,[2,67]),o($VD,[2,68]),o($VD,[2,69]),o($VD,[2,70]),o($VD,[2,71]),o($VD,[2,72]),o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),{14:[1,69]},{14:[1,70]},{14:[1,71]},{14:[1,72]},{14:[1,73]},{14:[1,74]},{15:[1,75],19:76,23:77,25:78,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7},{13:$V9,14:$Va,15:[1,79],21:80,24:81,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{8:[2,24],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{13:$V9,14:$Va,24:82,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:83,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:84,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:85,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:86,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:87,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:88,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:89,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:90,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:91,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:92,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:93,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:94,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:95,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},o($VD,[2,60]),o($VE,[2,61],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,68:$VC}),{15:[1,96],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{13:$V9,14:$Va,24:97,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:98,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:99,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:100,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:101,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:102,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{16:[1,103]},{15:[1,104],22:[1,105]},o($VF,[2,13]),{13:[1,106]},{8:[1,107]},{15:[1,108],22:[1,109]},o($VF,[2,15],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC}),o($VG,[2,47],{56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VG,[2,48],{56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VH,[2,49],{58:$Vt}),o($VH,[2,50],{58:$Vt}),o($VH,[2,51]),o($VH,[2,52],{58:$Vt}),o($VI,[2,53],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VI,[2,54],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VI,[2,55],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VI,[2,56],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VI,[2,57],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VE,[2,58],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,68:$VC}),o([8,15,22,66],[2,59],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,68:$VC}),o($VI,[2,63],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu}),o($VD,[2,62]),{15:[1,110],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{15:[1,111],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{15:[1,112],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{15:[1,113],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{15:[1,114],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{15:[1,115],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{7:118,9:119,13:$V1,17:116,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:117,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{16:[1,126]},{23:127,25:78,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7},o($VF,[2,16]),o($V8,[2,10]),{8:[1,128]},{13:$V9,14:$Va,24:129,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},o($VD,[2,17]),o($VD,[2,18]),o($VD,[2,19]),o($VD,[2,20]),o($VD,[2,21]),o($VD,[2,22]),{7:118,9:119,13:$V1,18:[1,130],25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:131,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},o($VM,[2,32]),{8:[1,132]},{8:[1,133]},o($VM,[2,35]),o($VM,[2,36]),o($VM,[2,37]),{14:[1,134]},{14:[1,135]},{14:[1,136]},{7:118,9:119,13:$V1,17:137,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:117,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},o($VF,[2,12]),o($V8,[2,11]),o($VF,[2,14],{54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC}),o($V8,[2,8]),o($VM,[2,31]),o($VM,[2,33]),o($VM,[2,34]),{13:$V9,14:$Va,24:138,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:139,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{13:$V9,14:$Va,24:140,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{7:118,9:119,13:$V1,18:[1,141],25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:131,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{15:[1,142],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{15:[1,143],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{15:[1,144],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},o($V8,[2,9]),{8:[1,145]},{16:[1,146]},{16:[1,147]},o($VM,[2,46]),{7:118,9:119,13:$V1,17:148,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:117,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{7:118,9:119,13:$V1,17:149,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:117,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{7:118,9:119,13:$V1,18:[1,150],25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:131,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{7:118,9:119,13:$V1,18:[1,151],25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:131,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},o($VM,[2,38],{50:153,51:154,49:[1,152]}),o($VM,[2,45]),{16:[1,155],48:$VN},o($VM,[2,40],{51:158,49:[1,157]}),o($VO,[2,43]),{7:118,9:119,13:$V1,17:159,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:117,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{14:[1,160]},{16:[1,161],48:$VN},o($VO,[2,42]),{7:118,9:119,13:$V1,18:[1,162],25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:131,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{13:$V9,14:$Va,24:163,26:37,27:$Vb,28:38,29:$Vc,30:39,31:$Vd,32:40,33:$Ve,34:41,35:$Vf,36:42,37:$Vg,55:$Vh,67:$Vi,69:$Vj,70:$Vk,71:$Vl,72:$Vm,73:$Vn,74:$Vo},{7:118,9:119,13:$V1,17:164,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:117,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},o($VM,[2,39]),{15:[1,165],54:$Vp,55:$Vq,56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,68:$VC},{7:118,9:119,13:$V1,18:[1,166],25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:131,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{16:[1,167]},o($VM,[2,41]),{7:118,9:119,13:$V1,17:168,25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:117,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},{7:118,9:119,13:$V1,18:[1,169],25:8,39:$V3,40:$V4,41:$V5,42:$V6,43:$V7,44:131,45:120,46:121,47:122,48:$VJ,52:$VK,53:$VL},o($VO,[2,44])],
defaultActions: {12:[2,26],13:[2,27],14:[2,28],15:[2,29],16:[2,30],17:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

       const TIPO_OPERACION= require('./controladores/Enums/TipoOperacion');
        const TIPO_VALOR = require('./controladores/Enums/TipoValor');
        const TIPO_DATO= require('./controladores/Enums/TipoDato');
        const INSTRUCCION = require('./controladores/Instruccion/Instruccion');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1://comentario lineal
break;
case 2:// comentario multiple líneas  
break;
case 3:return 39
break;
case 4:return 40
break;
case 5:return 42
break;
case 6:return 41 
break;
case 7:return 43
break;
case 8:return 53
break;
case 9:return 71
break;
case 10:return 72
break;
case 11:return 12
break;
case 12:return 20
break;
case 13:return 48
break;
case 14:return 49
break;
case 15:return 52
break;
case 16:return 27
break;
case 17:return 29
break;
case 18:return 31
break;
case 19:return 33
break;
case 20:return 35
break;
case 21:return 37
break;
case 22:return 69
break;
case 23:return 'punto'
break;
case 24:return 70
break;
case 25:return 68       
break;
case 26:return 64
break;
case 27:return 62
break;
case 28:return 60
break;
case 29:return 63
break;
case 30:return 38
break;
case 31:return 61
break;
case 32:return 22
break;
case 33:return 8
break;
case 34:return 'dospuntos'
break;
case 35:return 66
break;
case 36:return 65
break;
case 37:return 16
break;
case 38:return 18
break;
case 39:return 56
break;
case 40:return 57  
break;
case 41:return 55
break;
case 42:return 54
break;
case 43:return 58
break;
case 44:return 67
break;
case 45:return 59
break;
case 46:return 14
break;
case 47:return 15
break;
case 48:return 'corchA'
break;
case 49:return 'corchC'
break;
case 50:return 13
break;
case 51:return 73
break;
case 52:return 74
break;
case 53:return 5
break;
case 54:
        
        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);

break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:print\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:While\b)/i,/^(?:toLower\b)/i,/^(?:length\b)/i,/^(?:toUpper\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\.)/i,/^(?:[0-9]+\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:([a-zA-Z])([a-zA-Z0-9_])*)/i,/^(?:["\""]([^"\""])*["\""])/i,/^(?:["\'"]([^"\'"])*["\'"])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}